<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>Andi&apos;s Blog</title><link>https://www.grois.info</link><description>Blog that&apos;s mostly about tech stuff, but also random rambling</description><item><title>Adventures with Free Monads and higher</title><link>https://www.grois.info/posts/2023-03/2023-03-11-adventures-with-free-monads-and-higher.xhtml</link><description><![CDATA[<p>
First things first: If you only care about the code, here's the <a href="https://github.com/soulsource/higher-free-macro/">repo on github</a>.
</p>
<h2 id="motivation">Motivation</h2>
<p>
While learning a bit of Haskell I stumbled across the idea that one can use something called <a href="https://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html">Free Monad to represent an abstract syntax tree</a> of domain-specific languages. Since my Haskell-fu is still not too great, I didn't immediately understand that blog post. However, my interest was piqued. Domain specific languages, encoded in an easy to interpret syntax tree, sound like a nice building block for high-level game logic, after all.
</p>
<p>
The first thing I tried was to follow the example in the linked blog post to implement a small domain specific language for the domain of spending a night drinking in several bars, with varing beer temperature. It took me unreasonably long to add the functionality to stop drinking the first time a lukewarm beer gets served... Of course at the Le Rieur Sanglier. Let's better not talk too much about the <a href="https://www.grois.info/posts/2023-03/NiceEvening.hs">full Haskell code of that experiment</a>...
</p>
<p>
Still, I didn't feel like I actually understood what I was doing. So, I went ahead and tried to understand <a href="https://stackoverflow.com/a/13352580">the maths behind Free Monads</a>. Since I don't have a solid background in Category Theory, I couldn't claim with confidence that I understood it though...
</p>
<p>
This made me decide to learn more about category theory at some point, but for the moment I chose to follow a more pragmatic approach: Learnign by doing. In this case that means implementing the Free type (or a close-enough approximation) in Rust.
</p>
<h2 id="prerequisites">Prerequisites for implementing Free Monads in Rust</h2>
<p>
The obvious requirement of implementing a Free Monad is the ability to express what a Monad is. <a href="https://gist.github.com/edmundsmith/855fcf0cb35dd467c29a9350481f0ecf">Writing a Monad trait was really difficult in Rust until recently</a>. Luckily, <a href="https://blog.rust-lang.org/2022/10/28/gats-stabilization.html">Generic Associated Types are stable</a> meanwhile, what makes it possible to implement a type trait for <code>Monad</code> without the need for a workaround. The "<a href="https://docs.rs/higher/">higher</a>" crate does just that, with some nice extras like do-notation, and I decided to use it as a basis for my own experiments.
</p>
<p>
The next ingredient is the actual <code>Free</code> type. Rust does not have higher kinded types, so, where in Haskell one would just write <code>data&nbsp;Free&nbsp;f&nbsp;a&nbsp;= Pure&nbsp;a&nbsp;| Free&nbsp;(f&nbsp;(Free&nbsp;f&nbsp;a))</code>, the closest thing one could do in Rust would be <code>enum Free&lt;A,G&gt;{ Pure(A), Free(G) }</code> with further constraints on the respective trait implementations. But <code>G</code> depends on <code>A</code>, so, after mapping/binding we end up with a different <code>G</code>. For now, let us not bother about this, the problems will show up soon enough.
</p>
<p>
In addition, we need an indirection. Since <code>G</code> will be referencing <code>Free&lt;A,G&gt;</code>, it needs to be put behind some smart pointer. Since (nearly) all trait methods in "higher" demand ownership of the passed-in values, and some types in "higher" like <code>ApplyFn</code> do not implement <code>Clone</code>, this needs to be a smart pointer that allows the code to take ownership without the need to copy its data. This pretty much limits the usage to <a href="https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"><code>Box</code>, which is <em>special</em></a> in that regard. In other words, our actual type will be more along the lines of <code>enum Free&lt;A,G&gt;{ Pure(A), Free(Box&lt;G&gt;) }</code>. This is still fine though, because for <a href="https://github.com/rust-lang/rust/issues/87121">almost</a> all intents and purposes, <code>Box</code> is transparent.
</p>
<p>
Now, in order to turn this type into a <a href="https://docs.rs/higher/latest/higher/trait.Monad.html"><code>Monad</code></a>, we just have to implement a few traits from "higher" on it: <a href="https://docs.rs/higher/latest/higher/trait.Functor.html"><code>Functor</code></a>, <a href="https://docs.rs/higher/latest/higher/trait.Pure.html"><code>Pure</code></a>, <a href="https://docs.rs/higher/latest/higher/trait.Apply.html"><code>Apply</code></a>, and <a href="https://docs.rs/higher/latest/higher/trait.Bind.html"><code>Bind</code></a>. This sounds easy enough, right?
</p>
<h2 id="first_attempt">A naive first attempt</h2>
<p>
With that in mind, we can start hacking:<br/>
<code>
	enum Free&lt;A,G&gt;{<br/>
	&nbsp;&nbsp;Pure(A),<br/>
	&nbsp;&nbsp;Free(Box&lt;G&gt;)<br/>
	}<br/>
	<br/>
	impl&lt;'a, A, G&gt; Functor&lt;'a, A&gt; for Free&lt;A,G&gt;<br/>
	&nbsp;&nbsp;where G : Functor&lt;'a, Self&gt;<br/>
	{<br/>
	&nbsp;&nbsp;type Target&lt;T&gt; = Free&lt;T,???&gt;<br/>
	&nbsp;&nbsp;fn fmap&lt;B, F&gt;(self, f: F) -&gt; Self::Target&lt;B&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;todo!()<br/>
	&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<p>
Now, we hit the problem mentioned before. How are we supposed to express the type that <code>G</code> becomes in the <acronym title="Generic Associated Type">GAT</acronym>? Trying to write it by hand we end up with <code>type&nbsp;Target&lt;T&gt;&nbsp;= Free&lt;T, G::Target&lt;Free&lt;T, G::Target&lt;Free&lt;T, G::Target&lt;Free&lt;T,...&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>. However, we could try to refer to <code>Self</code> to escape this: <code>type&nbsp;Target&lt;T&gt;&nbsp;= Free&lt;T, G::Target&lt;Self::Target&lt;T&gt;&gt;&gt;</code>. This looks promising, except for the little issue that the compiler tries to replace it with <code>type&nbsp;Target&lt;T&gt;&nbsp;= Free&lt;T, G::Target&lt;Free&lt;T, G::Target&lt;Free&lt;T, G::Target&lt;Free&lt;T,...&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> again...
</p>
<p>
Obviously this leads nowhere. <a href="https://doc.rust-lang.org/reference/types.html#recursive-types">Type aliases in Rust cannot be recursive.</a> Therefore the type signature of the Free Monad type has to look different.
</p>
<h2 id="first_macro_attempt">Macros to the rescue</h2>
<p>
The problem obviously arises, because the second type parameter of the <code>enum Free&lt;A,G&gt;</code> depends on the first one. But there is a rather trivial way to get rid of it, by using a newtype:<br/>
<code>struct ConcreteFree&lt;A&gt;(Free&lt;A,ConcreteFunctorType&lt;Self&gt;&gt;)</code>
</p>
<p>
Unlike type aliases, <a href="https://doc.rust-lang.org/reference/types.html#recursive-types">actual types in Rust can be recursive</a>. While this obviously works, it would require implementing the traits needed for it to be a <code>Monad</code> for every newtype of this shape. That sounds like the perfect job for a macro though.
</p>
<p>
However, if the type is already generated by a macro, the newtype is no longer necessary. The macro could just directly implement the <code>enum ConcreteFree&lt;A&gt;</code>. While implementing <code>Functor</code> and <code>Bind</code> for this macro-generated type, we run into an obstacle in the form of ownership of the mapping function:<br/>
<code>
	impl&lt;'a,A&gt; Functor&lt;'a,A&gt; for $name&lt;A&gt; {<br/>
	&nbsp;&nbsp;type Target&lt;T&gt; = $name&lt;T&gt;;<br/>
	fn fmap&lt;B,F&gt;(self, f: F) -&gt; Self::Target&lt;B&gt; where F: Fn(A) -&gt; B + 'a{<br/>
	&nbsp;&nbsp;match self{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;$name::Pure(a) =&gt; $name::Pure(f(a)),<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;$name::Free(fa) =&gt; {$name::Free(Box::new(fa.fmap(|x| x.fmap(f))))},<br/>
	&nbsp;&nbsp;}<br/>
        }
</code>
</p>
<p>
The problem is that <code>f</code> gets <a href="https://doc.rust-lang.org/stable/error_codes/E0507.html">moved out of  the closure</a> in the <code>$name::Free(fa)</code> match arm, because there is no guarantee that <code>fa.fmap()</code> doesn't call the closure multiple times.
</p>
<p>
This is important enough to highlight it, and to add an interlude instead of going directly to the fix for the issue, because this one compile error is actually what captures the essence of a Free Monad from a programmer's perspective. In other words, this was the point at which the little hamster living in my brain jumped into its wheel and started spinning it.
</p>
<h2 id="free_monad_ramblings">So, what is a Free Monad now, in simple terms?</h2>
<p>
My own mental picture, which is a gross oversimplification and ignores all mathematical details, is actually a rather simple one. A Free Monad builds up a tree of nodes. The nodes can either be leaf-nodes and contain a value (Pure), or can be inner nodes (Free) with child-nodes, the structure of which is imposed by the Functor the Free Monad is based on. Free nodes can also be leaf-nodes though, in case the Functor has states that hold no data, for instance <code>Option::None</code>. Free nodes can hold values too, but those values are not affected by map/bind/... The monadic operations performed on a Free Monad traverse it (depth first), and only affect the <code>Pure</code> nodes. For instance, <code>a.apply(f)</code> traverses the Free Monad <code>f</code>, and replaces any <code>Pure</code> it finds with <code>a.fmap(v)</code>, where <code>v</code> is the value (in this case: a function) stored in the Pure node. The result of <code>a.apply(f)</code> is therefore a tree where each previous <code>Pure</code> has been replaced by a sub-tree that looks like <code>a</code>, and holds the mapped values in its <code>Pure</code> nodes. Or, as a simler example, let's take <code>a.bind(f)</code>. The function <code>f</code> returns a Free Monad too, so what this does is that every <code>Pure</code> in <code>a</code> gets replaced by the result of <code>f</code> applied to its value. And, the most simple example, <code>a.fmap(f)</code>, just replaces each <code>Pure</code> in <code>a</code> by another <code>Pure</code>, now holding the mapped value.
</p>
<h3 id="ugly_drawings">Illustrations of fmap, bind and apply</h3>
<h4 id="ugly_fmap_drawing">What does <code>a.fmap(f)</code> map?</h4>
<p>
Sometimes a picture says more than a thousand words. For these drawings, let's just take a list with 2 elements as our Functor. The most simple operation is <code>a.fmap(f)</code> where <code>f : Fn(A)-&gt;B</code>. Let's just assume our <code>a</code> looks like this:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:defs>
			<svg:svg id="Free" overflow="visible">
				<svg:rect  width="100" height="30" fill-opacity="0" stroke-width="3px" stroke="#000000" stroke-opacity="1"/>
				<svg:text font-size="16" x="10" y="20" fill="#000000">Free</svg:text>
			</svg:svg>
			<!-- Making Pure a def too, though it's just a rect, fixes display in firefox reading mode. -->
			<svg:svg id="Pure" overflow="visible">
				<svg:rect  width="100" height="30" fill-opacity="0" stroke-width="3px" stroke="#000000" stroke-opacity="1"/>
			</svg:svg>
		</svg:defs>
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">Pure d</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">Pure b</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="80"/>
		<svg:text font-size="16" x="130" y="100" fill="#000000">Pure c</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
In the case of <code>a.fmap(f)</code> the shape of the Free Monad doesn't change. Just the values in the Pure nodes are replaced:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">Pure f(d)</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">Pure f(b)</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="80"/>
		<svg:text font-size="16" x="130" y="100" fill="#000000">Pure f(c)</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<h4 id="ugly_bind_drawing">And <code>a.bind(f)</code>?</h4>
<p>
<code>a.bind(f)</code> is rather similar to <a href="#ugly_fmap_drawing"><code>a.fmap(f)</code></a>, but the signature of <code>f</code> is different: <code>f : Fn(A)-&gt;Free&lt;B&gt;</code>. So, instead of replacing every Pure node by another Pure node, <code>a.bind(f)</code> can replace individual nodes by whole sub-trees. Let's start with the same example tree again:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">Pure d</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">Pure b</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="80"/>
		<svg:text font-size="16" x="130" y="100" fill="#000000">Pure c</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
This gets replaced by:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">f(d)</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">f(b)</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="80"/>
		<svg:text font-size="16" x="130" y="100" fill="#000000">f(c)</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
If, for example, <code>f(b)=Pure x</code>, <code>f(c)=Free(Pure y, Pure z)</code> and <code>f(d)=Pure w</code>, the result of <code>a.bind(f)</code> would be this tree:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 160" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">Pure w</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">Pure x</svg:text>
		<svg:use xlink:href="#Free" x="120" y="80"/>
		<svg:use xlink:href="#Pure" x="65" y="120"/>
		<svg:text font-size="16" x="75" y="140" fill="#000000">Pure y</svg:text>
		<svg:use xlink:href="#Pure" x="175" y="120"/>
		<svg:text font-size="16" x="185" y="140" fill="#000000">Pure z</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
			<svg:line x1="170" y1="110" x2="125" y2="120"/>
			<svg:line x1="170" y1="110" x2="225" y2="120"/>
		</svg:svg>
	</svg:svg>
</div>
<h4 id="ugly_apply_drawing">And what exactly does <code>a.apply(f)</code> apply?</h4>
<p>
Last, let us take a look at an example of <code>a.apply(f)</code>, where <code>f</code> is given by this tree:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="65"/>
		<svg:use xlink:href="#Free" x="120" y="40"/>
		<svg:use xlink:href="#Pure" x="10" y="40"/>
		<svg:text font-size="16" x="20" y="60" fill="#000000">Pure g</svg:text>
		<svg:use xlink:href="#Pure" x="65" y="80"/>
		<svg:text font-size="16" x="75" y="100" fill="#000000">Pure h</svg:text>
		<svg:use xlink:href="#Pure" x="175" y="80"/>
		<svg:text font-size="16" x="185" y="100" fill="#000000">Pure i</svg:text>
		<svg:svg stroke-width="3px" stroke="#000000">
			<svg:line x1="115" y1="30" x2="170" y2="40"/>
			<svg:line x1="115" y1="30" x2="60" y2="40"/>
			<svg:line x1="170" y1="70" x2="115" y2="80"/>
			<svg:line x1="170" y1="70" x2="225" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
If we now call <code>a.apply(f)</code>, the result would become
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="65"/>
		<svg:use xlink:href="#Free" x="120" y="40"/>
		<svg:use xlink:href="#Pure" x="10" y="40"/>
		<svg:text font-size="16" x="20" y="60" fill="#000000">a.fmap(g)</svg:text>
		<svg:use xlink:href="#Pure" x="65" y="80"/>
		<svg:text font-size="16" x="75" y="100" fill="#000000">a.fmap(h)</svg:text>
		<svg:use xlink:href="#Pure" x="175" y="80"/>
		<svg:text font-size="16" x="185" y="100" fill="#000000">a.fmap(i)</svg:text>
		<svg:svg stroke-width="3px" stroke="#000000">
			<svg:line x1="115" y1="30" x2="170" y2="40"/>
			<svg:line x1="115" y1="30" x2="60" y2="40"/>
			<svg:line x1="170" y1="70" x2="115" y2="80"/>
			<svg:line x1="170" y1="70" x2="225" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
For example, if <code>a</code> would be this tree:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 285 120" preserveAspectRatio="xMidYMin meet" style="max-width:8cm;">
		<svg:use xlink:href="#Free" x="120"/>
		<svg:use xlink:href="#Free" x="65" y="40"/>
		<svg:use xlink:href="#Pure" x="175" y="40"/>
		<svg:text font-size="16" x="185" y="60" fill="#000000">Pure d</svg:text>
		<svg:use xlink:href="#Pure" x="10" y="80"/>
		<svg:text font-size="16" x="20" y="100" fill="#000000">Pure b</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="80"/>
		<svg:text font-size="16" x="130" y="100" fill="#000000">Pure c</svg:text>
		<svg:svg stroke="#000000" stroke-width="3px">
			<svg:line x1="170" y1="30" x2="225" y2="40"/>
			<svg:line x1="170" y1="30" x2="115" y2="40"/>
			<svg:line x1="115" y1="70" x2="60" y2="80"/>
			<svg:line x1="115" y1="70" x2="170" y2="80"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
The result of <code>a.apply(f)</code> would then look like this:
</p>
<div>
	<svg:svg xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 -5 670 210" preserveAspectRatio="xMidYMin meet" style="max-width:20cm;">
		<svg:use xlink:href="#Free" x="257.5"/>
		<svg:use xlink:href="#Free" x="120" y="40"/>
		<svg:use xlink:href="#Free" x="395" y="40"/>
		<svg:use xlink:href="#Free" x="65" y="80"/>
		<svg:use xlink:href="#Pure" x="175" y="80"/>
		<svg:text font-size="16" x="185" y="100" fill="#000000">Pure g(d)</svg:text>
		<svg:use xlink:href="#Free" x="285" y="80"/>
		<svg:use xlink:href="#Free" x="505" y="80"/>
		<svg:use xlink:href="#Pure" x="10" y="120"/>
		<svg:text font-size="16" x="20" y="140" fill="#000000">Pure g(b)</svg:text>
		<svg:use xlink:href="#Pure" x="120" y="120"/>
		<svg:text font-size="16" x="130" y="140" fill="#000000">Pure g(c)</svg:text>
		<svg:use xlink:href="#Free" x="230" y="120"/>
		<svg:use xlink:href="#Pure" x="340" y="120"/>
		<svg:text x="350" y="140" font-size="16" fill="#000000">Pure h(d)</svg:text>
		<svg:use xlink:href="#Free" x="450" y="120"/>
		<svg:use xlink:href="#Pure" x="560" y="120"/>
		<svg:text x="570" y="140" font-size="16" fill="#000000">Pure i(d)</svg:text>
		<svg:use xlink:href="#Pure" x="175" y="160"/>
		<svg:text x="185" y="180" font-size="16" fill="#000000">Pure h(b)</svg:text>
		<svg:use xlink:href="#Pure" x="285" y="160"/>
		<svg:text x="295" y="180" font-size="16" fill="#000000">Pure h(c)</svg:text>
		<svg:use xlink:href="#Pure" x="395" y="160"/>
		<svg:text x="405" y="180" font-size="16" fill="#000000">Pure i(b)</svg:text>
		<svg:use xlink:href="#Pure" x="505" y="160"/>
		<svg:text x="515" y="180" font-size="16" fill="#000000">Pure i(c)</svg:text>
		<svg:svg stroke-width="3px" stroke="#000000">
			<svg:line x1="307.5" y1="30" x2="170" y2="40"/>
			<svg:line x1="307.5" y1="30" x2="445" y2="40"/>
			<svg:line x1="170" y1="70" x2="115" y2="80"/>
			<svg:line x1="170" y1="70" x2="225" y2="80"/>
			<svg:line x1="445" y1="70" x2="335" y2="80"/>
			<svg:line x1="445" y1="70" x2="555" y2="80"/>
			<svg:line x1="115" y1="110" x2="60" y2="120"/>
			<svg:line x1="115" y1="110" x2="170" y2="120"/>
			<svg:line x1="335" y1="110" x2="280" y2="120"/>
			<svg:line x1="335" y1="110" x2="390" y2="120"/>
			<svg:line x1="555" y1="110" x2="500" y2="120"/>
			<svg:line x1="555" y1="110" x2="610" y2="120"/>
			<svg:line x1="280" y1="150" x2="225" y2="160"/>
			<svg:line x1="280" y1="150" x2="335" y2="160"/>
			<svg:line x1="500" y1="150" x2="445" y2="160"/>
			<svg:line x1="500" y1="150" x2="555" y2="160"/>
		</svg:svg>
	</svg:svg>
</div>
<p>
As you can see, the shape after <code>a.apply(f)</code> matches <code>f</code>, with every <code>Pure x</code> replaced by the result of calling <code>a.fmap(x)</code>.
</p>
<h4 id="reminder_that_tree_is_a_too_simple_picture">A small reminder</h4>
<p>
Please also keep in mind that the tree-picture is just that, a mental picture. The actual data structure can be more complicated than that. For instance, if the Functor uses continuation functions (see <a href="#consequences_for_dsls">below</a>), the actual shape of a branch can depend on values that are only supplied after its creation. Of course it still behaves like a tree, but the branches are created in a lazy manner then.
</p>
<h3 id="consequences_for_dsls">Consequences for <acronym title="Embedded Domain Specific Language">eDSL</acronym>s</h3>
<p>
This structure can be used to express embedded domain specific languages in a rather simple manner, especially when combined with do-notation:
</p>
<ul>
	<li>Commands are <code>Free</code> nodes. To append a command to a program, one can use <code>bind()</code> to replace the previous <code>Pure</code> nodes with it. By default, new commands contain &quot;default&quot; <code>Pure</code> nodes.</li>
	<li>Return values are stored in <code>Pure</code> nodes. That way, the next command that gets appended with <code>bind()</code> can take that value as parameter. When using do-notation, it can be assigned to a name, and commands further down can refer to it.</li>
	<li>To accept input from the interpreter of the <acronym title="Embedded Domain Specific Language">eDSL</acronym>, <code>Free</code> nodes can contain a continuation function that takes that value as input parameter, and returns the remainder of the tree that depends on the input. This will get more clear once we get <a href="#usage_example">to an actual example.</a></li>
</ul>
<h4 id="do_notation">How does do-notation fit into this picture?</h4>
<p>
In case you don't know do-notation, a short reminder how it works. It's syntax sugar over chained <code>bind()</code> calls. Using the syntax from <a href="https://docs.rs/higher/latest/higher/macro.run.html">higher's <code>run!()</code> macro</a>, it works like this:<br/>
<code>
	run!{<br/>
	&nbsp;&nbsp;a;<br/>
	&nbsp;&nbsp;b;<br/>
	&nbsp;&nbsp;...<br/>
	}<br/>
</code>
will be translated into<br/>
<code>
	a.bind(move |_| { b.bind(move |_| { ... } ) } );<br/>
</code>
and values can be bound to names like this:<br/>
<code>
	run!{<br/>
	&nbsp;&nbsp;x &lt;= a;<br/>
	&nbsp;&nbsp;b;<br/>
	&nbsp;&nbsp;...<br/>
	}<br/>
</code>
which will be converted into<br/>
<code>
	a.bind(move |x| { b.bind(move |_| { ... } ) } );<br/>
</code>
</p>
<p>
This is what makes the Free Monad so awesome for <acronym title="Embedded Domain Specific Language">eDSL</acronym> usage. You can write the script in your <acronym title="Embedded Domain Specific Language">eDSL</acronym> within do-notation. Every new statement gets appended after the previous one. In the end you build a data structure, but it feels like just writing an imperative program. Branching can be expressed too, because, <a href="#ugly_bind_drawing">as we have seen</a>, <code>bind()</code> appends the new code instead of every Pure node. Since desugaring creates nested closures, you can refer to previously created names in following statements. Also, the individual &quot;statements&quot; are actually functions returning a <code>Free</code>, so you can use syntax from the host-language (in this case Rust) in them. To see it in action, check the <a href="#usage_example">example</a> below.
</p>
<h3 id="return_of_the_maths">One word about mathematics</h3>
<p>
I know, I wrote that this ignores all mathematical details, but one thing I have to mention: By its very definition, a <a href="https://en.wikipedia.org/wiki/Free_object">Free Monad</a> obays the <a href="https://wiki.haskell.org/Monad_laws">Monad laws</a> as long as the Functor it is based on obeys the <a href="https://wiki.haskell.org/index.php?title=Functor&amp;oldid=64838#Functor_Laws">Functor laws</a>. In other words, for our <acronym title="Embedded Domain Specific Language">eDSL</acronym> use case, we really need to make sure our Functor is actually a lawful Functor, not only something just implementing the trait.
</p>
<h2 id="generic_a_new_hope">A generic attempt</h2>
<p>
All that thinking about the properties of Functors and the Free Monad got the hamster wheel in my brain spinning quite fast. And just before the hamster got a heart attack, a thought was produced: If the Functor we use as a basis for our Free Monad obeys the <a href="https://wiki.haskell.org/index.php?title=Functor&amp;oldid=64838#Functor_Laws">Functor laws</a>, especially the one regarding the composition of morphisms, then the <code>Functor&lt;'a,A&gt;::Target&lt;T&gt;</code> <em>must not</em> depend on <code>A</code>. Or, in other words,<br/>
<code>&#x2200;A&#x2200;B&#x2200;C : Functor&lt;A&gt;::Target&lt;B&gt;::Target&lt;C&gt; = Functor&lt;A&gt;::Target&lt;C&gt;</code>.
</p>
<p>
This sounds like something that we might be able to convey to the Rust compiler, in order to eliminate the Functor's exact type from Free's type signature. This also sounds like a perfect use case for the <a href="https://doc.rust-lang.org/reference/types/never.html"><code>!</code> type</a> to express that the type in the signature will never actually be constructed:<br/>
<code>
	use never_say_never::Never;<br/>
	enum Free&lt;'a,A,F&gt; where F : Functor&lt;'a,Never&gt;{<br/>
	&nbsp;&nbsp;Pure(A),<br/>
	&nbsp;&nbsp;Free(Box&lt;F::Target&lt;Self&gt;&gt;)<br/>
	}<br/>
	impl&lt;'a,A,G&gt; Free&lt;'a,A,G&gt; where G : Functor&lt;'a,Never&gt;{<br/>
	&nbsp;&nbsp;fn __fmap_impl&lt;B, F&gt;(self, f: &amp;'a F) -&gt; Free&lt;'a,B,G&gt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;where F: Fn(A) -&gt; B + 'a,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;G::Target::&lt;Self&gt; : Functor&lt;'a, Self, Target&lt;Free&lt;'a,B,G&gt;&gt; = G::Target&lt;Free&lt;'a,B,G&gt;&gt;&gt;<br/>
	&nbsp;&nbsp;{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;match self {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free::Pure(a) =&gt; {Free::Pure(f(a))},<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free::Free(fa) =&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free::&lt;'a,B,G&gt;::Free(Box::new(<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa.fmap(|x| x.__fmap_impl(f))<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<p>
This actually compiles in current Stable Rust. Also, this includes the fix for the issue we had <a href="#first_macro_attempt">above</a>. Instead of consuming the mapping function, we take a reference to it. But now we have another issue: The trait bound expressing that we are dealing with a lawful Functor is on the fmap function. If we try to implement the <a href="https://docs.rs/higher/latest/higher/trait.Functor.html"><code>Functor</code></a> trait, we have no way to express this, because putting the same constraint on the <code>fmap()</code> function causes <a href="https://doc.rust-lang.org/error_codes/E0276.html">[E0276]: impl has stricter requirements than trait</a>. If only there was a syntax in Rust to express <code>&#x2200;B</code>... Then we could actually move that bound to the trait implementation itself... But this is certainly something we can only dream of, <a href="#generic_the_nightly_strikes_back">right</a>?
</p>
<h2 id="return_of_the_macro">Back to Macros</h2>
<p>
While dreaming about syntax is nice, it doesn't help solving the problem at hand, namely implementing a Free Monad type in Rust. With the new knowledge that it's possible to work around the move of the mapping function in <code>Bind</code> and <code>Functor</code> by using a reference instead of the function itself, it's now actually straightforward to implement those operations for <code>Free&lt;A&gt;</code>. To make this work with the traits from <code>higher</code>, it's enough to move the actual implementation into a separate function that takes <code>&amp;f</code> instead of <code>f</code>, and have the trait function call that one.<br/>
<code>
	impl&lt;'a,A&gt; Functor&lt;'a,A&gt; for $name&lt;A&gt; {<br/>
	&nbsp;&nbsp;type Target&lt;T&gt; = $name&lt;T&gt;;<br/>
	&nbsp;&nbsp;fn fmap&lt;B,F&gt;(self, f: F) -&gt; Self::Target&lt;B&gt; where F: Fn(A) -&gt; B + 'a{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;self.__fmap_impl(&amp;f)<br/>
	&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<p>
<code>Pure</code> is straightforward to implement and <code>Bind</code> is nearly identical to <code>Functor</code>, so only <code>Apply</code> is left. This one causes troubles though. As we now know, a Free Monad is like a tree, and <code>a.apply(f)</code> <a href="#ugly_apply_drawing">replaces each <code>Pure</code> in <code>f</code> with the Free Monad obtained by calling <code>a.fmap()</code> with the function stored in that <code>Pure</code></a>. This means, that we have to call <code>a.fmap()</code> multiple times, but <code>a.fmap()</code> consumes <code>a</code>... The easy way out is to require that <code>a</code> is <code>Clone</code>. While this isn't the nicest requirement, <code>higher</code> also needs it for its <code>Apply</code> implementation for <code>Vec</code>, so at least in that regard the Free Monad is in good company. Furthermore, there is no real reason that <code>Monad</code> requires <code>Apply</code>. That's just because Haskell has this requirement for historical reasons, not because the maths behind Monads would require it. One could therefore just roll a <code>trait&nbsp;MyOwnMonadWithBlackjackAndHookers&nbsp;: Functor&nbsp;+&nbsp;Bind&nbsp;+&nbsp;Pure</code> and use that one instead of the actual <code>Monad</code> from <code>higher</code>.
</p>
<p>
Another challenge here is that just porting over the <code>Apply</code> source code from Haskell's Free type would cause an insane amount of deep copies. Luckily there is a generic <code>Apply</code> function in <code>higher</code> that one can use: <code>higher::apply::ap(f,a)</code>. This is way better suited for Rust code, because it only makes one deep copy of <code>a</code> per <code>Pure</code> node in <code>f</code>. This function is actually the generic <code>Apply</code> implementation that works for every type that is <code>Bind</code> and <code>Pure</code>.
</p>
<p>
By the way, the deep copies could be eliminated completely be replacing the <code>Box</code> in the type by a shared reference. However, <code>Box</code> has unique ownership, and therefore allows to move out of it if one owns the <code>Box</code> (because <a href="https://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"><code>Box</code> is special</a>). Shared references <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html#method.try_unwrap">only allow moving out if the reference count is exactly 1</a>. That means that if we used a shared reference, all <code>Functor</code> and <code>Bind</code> would require <code>Clone</code> too as a fallback if the reference count is not 1. I consider this additional requirement much worse than suboptimal performance in <code>Apply</code>.
</p>
<p>
With this, our macro can now generate Free Monads for any arbitrary Functor. To make it a bit more useable, <code>lift_f(a)</code> and <code>retract(m)</code> are still missing. The function signatures for those are a bit weird, but nothing too bad:<br/>
<code>
	impl&lt;$generic&gt; $name&lt;$generic&gt;{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;$v fn lift_f(command : &lt;$f as $crate::higher::Functor&lt;Self&gt;&gt;::Target&lt;$generic&gt;) -&gt; Self{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use $crate::higher::Functor;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Self::Free(Box::new(command.fmap(|a| Self::Pure(a))))<br/>
	&nbsp;&nbsp;}<br/>
	<br/>
	&nbsp;&nbsp;$v fn retract&lt;'a&gt;(self) -&gt; &lt;$f as $crate::higher::Bind&lt;'a,Self&gt;&gt;::Target&lt;$generic&gt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;where $f : $crate::higher::Monad&lt;'a,Self&gt;,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;$f as $crate::higher::Bind&lt;'a,Self&gt;&gt;::Target&lt;$generic&gt; : $crate::higher::Pure&lt;$generic&gt;<br/>
	&nbsp;&nbsp;{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;use $crate::higher::{Bind, Pure};<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;match self {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name::Pure(a) =&gt; {&lt;$f as $crate::higher::Bind&lt;'a,Self&gt;&gt;::Target::&lt;$generic&gt;::pure(a)},<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name::Free(m) =&gt; {m.bind(|a| a.retract())}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<h2 id="lifetimes_the_solution_and_cause_of_all_rust_problems">Liftimes enter the room</h2>
<p>
And with that, everything was looking great. Except that lifetimes would like to have a word... In our use case of domain specific languages, we have to deal with continuation functions, for which a Functor needs to use function composition to remain lawful. And this means the output of <code>Functor</code> and <code>Bind</code> can reference the mapping function itself. In other words, lifetime annotations are needed, and the trick we used above to work around the need to copy the mapping function doesn't work in that case. Imposing <code>Clone</code> is also not possible, because the mapping functions are not known at the <code>impl</code>-level...
</p>
<p>
Luckily we can just use shared references here (remember, a Free Monad is tree-like, so there are no reference cycles possible). So, instead of <code>__fmap_impl(self, f : &amp;F)</code> we can simply use <code>__fmap_impl(self, f : Rc&lt;F&gt;)</code> and everything is good again.
</p>
<p>
Of course this is now an understatement of the actual amount of work that went into making the macro lifetime-aware, and I'm pretty certain that there are still bugs hidden somewhere in that code.
</p>
<p>
But long story short, the resulting code is now available in <a href="https://github.com/soulsource/higher-free-macro/">the higher-free-macro project on github</a>.
</p>
<h2 id="generic_the_nightly_strikes_back">A generic <acronym title="Proof Of Concept">POC</acronym> in Nightly Rust</h2>
<p>
Turns out, the dream mentioned <a href="#generic_a_new_hope">above</a> started to became reality a few days ago. <a href="https://github.com/rust-lang/rust/issues/108185">Non-Lifetime binders</a> were merged to Nightly Rust.
</p>
<p>
This awesome new language feature allows us to write a <a href="https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=1af5b0970cfe400a9245483f84080b8f">generic Free Monad</a>. The linked playground compiles just fine with the nightly toolchain. It is a bit clunky to use, as the cycle in the <code>Clone</code> implementation needs to be broken by hand, so <code>#[derive(Clone)]</code> is not an option... However, the general idea is working.
</p>
<p>
The usage of the <code>enum Free&lt;A,F&gt;</code> on the linked playground is straightforward. <code>A</code> is the type of the value in <code>Free::Pure</code>, and <code>F</code> is the <code>Functor</code> the Free Monad is based on, specialized for the <code>!</code> <a href="https://github.com/rust-lang/rust/issues/35121">Never Type</a>. For instance, to get a Free Monad for a Functor <code>TestFunctor&lt;A&gt;</code>, one could simply use the type <code>Free&lt;A,TestFunctor&lt;!&gt;&gt;</code>. To make it a Monad, one also has to convince the compiler, that <code>Clone</code> is working. Deriving it currently does not work. See the Playground for details.
</p>
<h2 id="usage_example">A usage example for macro based implementation</h2>
<p>
Unless someone finds a clever way to do a generic implementation in Stable Rust, we are stuck with the macro-based one though. However, it's actually quite convenient to use. 
</p>
<p>
In order to declare a new Free Monad type for our Functor type, all we need to do is to call the <code>free!()</code> macro with the right parameters. Let's look at an example. Here <code>FreeSaturday&lt;'a,A&gt;</code> is a <code>Functor&lt;'a,A&gt;</code>: <code>free!(pub FreeSaturday&lt;'a, A&gt;, Saturday&lt;'a,FreeSaturday&lt;'a, A&gt;&gt;);</code>. The <code>pub</code> is optional, you can add it if you want your type to be public. <code>FreeSaturday&lt;'a, A&gt;</code> is the Functor. It can have multiple lifetimes, but it's important that the <em>first</em> lifetime is the one that will be used in the trait implementations. The <code>A</code> is the type that will be in the <code>Pure</code> variant. As last parameter you need to supply the <code>Functor</code>, specialized for the to-be-created Free Monad type. This is used to determine where the Free Monad's type- and lifetime parameters actually go in the Functor type.
</p>
<p>
The above is still rather dry. Let's have a quick glimpse at a full <acronym title="embedded Domain Specific Language">eDSL</acronym> example now, to see how we can use <a href="https://docs.rs/higher/latest/higher/macro.run.html">do-notation</a> to plan a nice Saturday evening.
</p>
<p>
We start with the usual boilerplate, and then define our Functor, <code>Saturday</code>. It has two commands for our language. Either we can go to a different bar, or drink a beer at the location we are at right now. Both commands have a continuation function, <code>Next</code>. For the use case as <acronym title="embedded Domain Specific Language">eDSL</acronym> we want these continuation functions to be pure. In Nightly rust, we could use <a href="https://github.com/rust-lang/rust/issues/67792">const_trait_impl</a> and <a href="https://github.com/rust-lang/rust/issues/106003">const_closures</a> to actually enforce this. Since none of these features are stable yet, for now we just have to be careful to not write impure code by accident... In any case, under the assumption that the continuation function is pure, it can be replaced by its return value, if it doesn't take any parameters. This is for instance the case for <code>GoToBar</code>. Here, <code>Next</code> is just a value, not a function. In the case <code>DrinkABeer</code> the return value of the continuation function depends on the <code>BeerQuality</code> at the current bar. This value is only known when we actually taste the beer there (as in: cause a side-effect). So, our (hopefully) pure Free Monad needs to store an actual <code>Fn(BeerQuality)-&gt;Next</code>. We do not want this function to show up in the type signature though, because that would make it quite impossible to implement <code>Functor</code> for <code>Saturday</code>. Also, we want to make <code>Saturday</code> cloneable, to allow <code>Apply</code> to be implemented for it. That's why the actual type of the continuation will be a shared reference to a trait object.
</p>
<p>
<code>
	use std::rc::Rc<br/>
	use higher_free_macro::free;<br/>
	use higher::*;<br/>
	<br/>	
	#[derive(Debug, Clone, PartialEq)]<br/>
	enum BeerQuality{<br/>
		&nbsp;&nbsp;Lukewarm,<br/>
		&nbsp;&nbsp;Refreshing<br/>
	}<br/>
	<br/>
	#[derive(Clone)]<br/>
	enum Saturday&lt;'a, Next&gt;{<br/>
		&nbsp;&nbsp;GoToBar{<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;name_of_bar : &amp;'a str,<br/>
			&nbsp;&nbsp;&nbsp;&nbsp;next : Next<br/>
		&nbsp;&nbsp;},<br/>
		&nbsp;&nbsp;DrinkABeer (Rc&lt;dyn Fn(BeerQuality)-&gt;Next + 'a&gt;) //Rc, because it's cloneable, dyn to keep it out of the type signature.<br/>
	}
</code>
</p>
<p>
When implementing <code>Functor</code> for <code>Saturday</code> we need to keep the <a href="https://wiki.haskell.org/index.php?title=Functor&amp;oldid=64838#Functor_Laws">Functor Laws</a> in mind. Sadly we can't just use the <code>#[derive(Functor)]</code> macro from "higher", as our <code>Saturday</code> is too complex for it to work. Otherwise this would be a trivial task... But well, here it's actually rather easy too. For <code>GoToBar</code> we can just map eagerly, because we are dealing with values. For <code>DrinkABeer</code>, where we evaluate the continuation lazily (as in: during interpretation of the Free Monad), we instead do function composition.
</p>
<p>
<code>
	impl&lt;'a, Next : 'a&gt; Functor&lt;'a, Next&gt; for Saturday&lt;'a, Next&gt;{<br/>
		&nbsp;&nbsp;type Target&lt;T&gt; = Saturday&lt;'a, T&gt;;<br/>
		<br/>
		&nbsp;&nbsp;fn fmap&lt;B, F&gt;(self, f: F) -&gt; Self::Target&lt;B&gt;<br/>
		&nbsp;&nbsp;where F: Fn(Next) -&gt; B + 'a {<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;match self {<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::GoToBar { name_of_bar, next } =&gt; {<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::GoToBar { name_of_bar, next: f(next) }<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::DrinkABeer(continuation) =&gt; {<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::DrinkABeer(Rc::new(move |x| f(continuation(x))))<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
		&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<p>
Next the magic happens. We call the <code>free!()</code> macro to generate the Free Monad <code>FreeSaturday</code>, based on the <code>Saturday</code> Functor.
</p>
<p>
<code>
	free!(FreeSaturday&lt;'a, A&gt;, Saturday&lt;'a,FreeSaturday&lt;'a, A&gt;&gt;);
</code>
</p>
<p>
It's convenient to have simple functions to create each <code>Free</code> variant, containing a <code>Pure</code> as continuation. These functions are the &quot;commands&quot; we run in do-notation later.
</p>
<p>
<code>
	fn go_to_bar(s : &amp;str) -&gt; FreeSaturday&lt;'_, ()&gt;{<br/>
	&nbsp;&nbsp;FreeSaturday::lift_f(<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;Saturday::GoToBar { name_of_bar: s, next: () }<br/>
	&nbsp;&nbsp;)<br/>
	}<br/>
	fn drink_a_beer&lt;'a&gt;() -&gt; FreeSaturday&lt;'a, BeerQuality&gt;{<br/>
	&nbsp;&nbsp;FreeSaturday::lift_f(<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;Saturday::DrinkABeer(<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rc::new(std::convert::identity)<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;)<br/>
	&nbsp;&nbsp;)<br/>
	}
</code>
</p>
<p>
Now we have all ingredients ready to actually write down the plan for a nice evening. We do that using, well, do-notation. In "higher" it's called <a href="https://docs.rs/higher/latest/higher/macro.run.html"><code>run!{}</code></a>. It's worth checking out the <a href="https://github.com/bodil/higher/blob/64bc195bca9b79c25917b249c0b269855b240e51/prelude/src/lib.rs#L150">source code of run!{}</a>, because it shows how elegant declarative macros in Rust can be.
</p>
<p>
Here we can see the signature of <code>fn drink_a_beer&lt;'a&gt;() -&gt; FreeSaturday&lt;'a, BeerQuality&gt;</code> in action. As noted <a href="#consequences_for_dsls">above</a>, in order to consume input from the interpreter later, we can build continuation functions that take an input parameter. Furthermore, the helper <code>drink_a_beer()</code> returns <code>FreeSaturday&lt;'a, BeerQuality&gt;</code>, meaning it has a <em>return value</em> of type <code>BeerQuality</code>, for which we can bind an identifier with the <code>&lt;=</code> operator of <code>run!{}</code>. It is worth noting that, while in this case the return value is from a side effect the interpreter has to deal with, that's a pattern that can also be used for methods within the <acronym title="embedded Domain Specific Language">eDSL</acronym>.
</p>
<p>
In a perfect world, we would make this a <code>const</code> function, just like we would make the continuation functions in the Functor const - to rule out any side effects. As far as I know this is not possible in Stable Rust, so we have to make sure everything in here is pure by hand...
</p>
<p>
The plan for the evening is by the way rather simple: If we get served a lukewarm beer, we stop drinking.
</p>
<p>
<code>
	fn a_nice_evening() -&gt; FreeSaturday&lt;'static,()&gt;{<br/>
	&nbsp;&nbsp;run! {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;drink_a_beer(); //at home. Don't care if lukewarm.<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;go_to_bar(&quot;Sunken Norwegian&quot;);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;x &lt;= drink_a_beer();<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;if x != BeerQuality::Lukewarm { run! {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drink_a_beer(); //alredy know if the beer here was lukewarm or not.<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go_to_bar(&quot;Le Rieur Sanglier&quot;);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x &lt;= drink_a_beer();<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if x != BeerQuality::Lukewarm { run! {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drink_a_beer();<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go_to_bar(&quot;Coyote Ugly&quot;);<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x &lt;= drink_a_beer();<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if x != BeerQuality::Lukewarm { run! {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drink_a_beer();<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield ()<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}} else{ run! { yield () } }<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}} else{ run! { yield () } }<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}} else{ run! { yield () } }<br/>
	&nbsp;&nbsp;}<br/>
	}
</code>
</p>
<p>
We can actually prove that the return value of <code>a_nice_evening()</code> is a <code>Monad</code>:
</p>
<p>
<code>
	fn _test_if_a_nice_evening_is_monad() -&gt; impl Monad&lt;'static, ()&gt;{<br/>
		&nbsp;&nbsp;a_nice_evening()<br/>
	}
</code>
</p>
<p>
Last, but not least, here we have an example interpreter that actually runs the above plan. This is now the location, where we actually know if we get lukewarm beer.
</p>
<p>
This interpreter just counts how many beers we consumed at each bar. There isn't much notable about it, except that it calls <code>get_beer_quality_of_location()</code> in case it encounters a <code>DrinkABeer</code> command, to actually run the continuation function.
</p>
<p>
<code>
	fn count_beers_consumed_per_bar(evening : FreeSaturday&lt;()&gt;) -&gt; Vec&lt;(&amp;str, u32)&gt;{<br/>
	&nbsp;&nbsp;//let's assume get_beer_quality_of_location() has side effects.<br/>
	&nbsp;&nbsp;fn get_beer_quality_of_location(l : &amp;str) -&gt; BeerQuality {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;if l == &quot;Le Rieur Sanglier&quot; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeerQuality::Lukewarm<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;} else {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeerQuality::Refreshing<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;fn interpret_evening_step&lt;'a, 'b : 'a&gt;(<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;l : &amp;'b str,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;mut v : Vec&lt;(&amp;'a str, u32)&gt;,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;saturday : FreeSaturday&lt;'b,()&gt;<br/>
	&nbsp;&nbsp;) -&gt; Vec&lt;(&amp;'a str, u32)&gt;{<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;match (l,&amp;*v,saturday){<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(_,_,FreeSaturday::Pure(_)) =&gt; v,<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(l, [.., (lo,co)], FreeSaturday::Free(f)) if *lo == l=&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match *f {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::GoToBar { name_of_bar, next } =&gt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interpret_evening_step(name_of_bar, v, next),<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::DrinkABeer(next) =&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.last_mut().unwrap().1 = co+1;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interpret_evening_step(l, v, next(get_beer_quality_of_location(l)))<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(l, _, FreeSaturday::Free(f)) =&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match *f {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::GoToBar { name_of_bar, next } =&gt;<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interpret_evening_step(name_of_bar, v, next),<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Saturday::DrinkABeer(next) =&gt; {<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v.push((l,1));<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interpret_evening_step(l, v, next(get_beer_quality_of_location(l)))<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;}<br/>
	&nbsp;&nbsp;interpret_evening_step(&quot;Home&quot;, Vec::new(), evening)<br/>
	}<br/>
</code>
</p>
<h3 id="performance">Performance considerations</h3>
<p>
Apart from the already mentioned limitation that (the luckily not too often needed) <code>Apply</code> performs deep copies, there is another thing that has to be highlighted: The <code>Free</code> type contains a <code>Box</code>. This means that a complex Free Monad also has high memory complexity. This means that one should really avoid using it in performance-critical code.
</p>
<p>
If combined with continuation functions, a typical use case in <acronym title="embedded Domain Specific Language">eDSL</acronym>s, the complexity increases even further, both memory-wise, and CPU-wise, because the continuations need to be run during interpretation.
</p>
<p>
It is also worth noting, that while building the Free Monad it's not really possible to avoid recursion. This means that building very complicated Free Monads might run into stack space limits. It's also not always predictable how deep the call stack gets if continuation functions and user-data are involved. Luckily the interpreter itself can usually be written without explicit recursions.
</p>
<h3 id="plans">Plans for the future</h3>
<p>
The next steps with this code are now to document it, and to add integration tests that also serve as examples. Once those two things are done, I'm planning to upload it to crates.io, even though it has its limitations.
</p>
]]></description><guid>https://www.grois.info/posts/2023-03/2023-03-11-adventures-with-free-monads-and-higher.xhtml</guid><pubDate>Sat, 11 Mar 2023 23:20:00 +0100</pubDate></item><item><title>Dosbox with MIDI on the Steam Deck</title><link>https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml</link><description><![CDATA[<h2 id="goal">Goal of this guide</h2>
<p>
This guide outlines one way to install <acronym title="Disk Operating System">DOS</acronym> games on the Steam Deck. It also explains how to enable a software synthesizer for <acronym title="Musical Instrument Digital Interface">MIDI</acronym> music support in those games. Finally, some tips on how one might launch those games conveniently from the Steam Deck's Game Mode are given.
</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>
To follow this guide, you will need to input a lot of text on the Steam Deck. While this is doable with the on-screen keyboard, it's not a convenient experience. I'd therefore strongly suggest to either connect a keyboard to the Deck, or to enable <acronym title="Secure Shell">SSH</acronym> access to the deck. I personally recommend the latter, as it also offers a convenient way to copy files to/from the deck.
</p>
<h3 id="ssh-access"><acronym title="Secure Shell">SSH</acronym> access</h3>
<p>
The first step get <acronym title="Secure Shell">SSH</acronym> working is to <a href="https://handheld.quest/posts/how-to-ssh-steam-deck/">enable the <acronym title="Secure Shell">SSH</acronym> server on the Steam Deck</a>. Since the deck is a mobile device and might therefore be used in untrusted networks, I'd strongly suggest to either <em>not</em> have the <acronym title="Secure Shell">SSH</acronym> daemon start up automatically, or to <a href="https://wiki.archlinux.org/title/OpenSSH#Force_public_key_authentication">disable password-based logins</a> entirely (of course only after copying your desktop user's public key to the Steam Deck. See either the <a href="https://wiki.archlinux.org/title/SSH_keys#Copying_the_public_key_to_the_remote_server">guide on <acronym title="Secure Shell">SSH</acronym> keys for Linux users</a>, or the <a href="https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter8.html#pubkey">guide on <acronym title="Secure Shell">SSH</acronym> keys for PuTTY</a> if you are running Windows).
</p>
<p>
In order to connect to your Steam Deck, you should be able to use the hostname that you can configure in the Steam Deck settings. I named my deck "grois-steamdeck", and all I have to do to connect to it from my Linux desktop is to run <code>ssh deck@grois-steamdeck</code> on the command line, enter my private key's password, and done. I'd expect the process to be reasonably similar on Windows, using <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PuTTY</a>.
</p>
<p>
To copy files you can use (almost) any file manager application on Linux. For instance, file managers using gvfs can just connect using an <acronym title="Secure File Transfer Protocol">sftp</acronym> <acronym title="Uniform Resource Locator">URL</acronym>, in my case <code>sftp://deck@grois-steamdeck</code>. I'm not sure if Windows Explorer can access <acronym title="Secure File Transfer Protocol">sftp</acronym> meanwhile, but if not, programs like <a href="https://filezilla-project.org/">FileZilla</a> or <a href="https://winscp.net/">WinSCP</a> are an adequate option.
</p>
<h2 id="dosbox-staging">Installing DosBOX Staging</h2>
<p>
I recommend using <a href="https://dosbox-staging.github.io/">DosBOX Staging</a> on the Steam Deck. The main reason is its built-in <acronym title="Musical Instrument Digital Interface">MIDI</acronym> software synthesizer. Installing a standalone software synthesizer on the Steam Deck is not straightforward, because of its read-only root filesystem. The built-in synthesizer of DosBOX staging makes this unnecessary though.
</p>
<p>
The easiest way to install DosBOX Staging is to use Discover in Desktop Mode. All you have to do is to search for "DosBOX Staging" and click "Install".<br/>
<a href="https://www.grois.info/posts/2023-02/discover-dosbox-staging.png"><img src="https://www.grois.info/posts/2023-02/discover-dosbox-staging_thumb.png" alt="Screenshot of Discover on the Steam Deck" width="320" height="200"/></a>
</p>
<p>
I'm not sure if the configuration files for DosBOX staging get created when installing it, or when it is first launched. It certainly won't hurt to start and quit it though, just to make sure.
</p>
<h2 id="midi">Enabling the <acronym title="Musical Instrument Digital Interface">MIDI</acronym> software synthesizer</h2>
<h3>Sound Font</h3>
<p>
FluidSynth needs a sound font file. You can find a list of sound font files and download links for most of them on the <a href="https://github.com/dosbox-staging/dosbox-staging/wiki/MIDI">DosBOX Staging WIKI page on <acronym title="Musical Instrument Digital Interface">MIDI</acronym></a>. I personally think that Patch93's SC-55 Soundfont is a good compromise between sound quality and retro feel, but of course that's a matter of taste.
</p>
<p>
The folder in which the flatpak version of DosBOX Staging searches for Sound Fonts is <code>/home/deck/.var/app/io.github.dosbox-staging/config/dosbox/soundfonts</code>. In case you aren't a seasoned Linux/UNIX user, the <code>.</code> at the beginning of the folder name <code>.var</code> means that this folder is hidden. To see it in Dolphin File Manager, you'll need to enable the display of hidden files/folders therefore.
</p>
<h3 id="dosbox-staging-conf">DosBOX configuration</h3>
<p>
Now, in order to enable FluidSynth in DosBOX Staging, you'll need to modify the dosbox-staging.conf file. If you are connected over <acronym title="Secure Shell">SSH</acronym>, you can use the nano editor on the command line: <code>nano /home/deck/.var/app/io.github.dosbox-staging/config/dosbox/dosbox-staging.conf</code>. The Steam Deck also comes with the vim editor preinstalled, so if you know how to use it, you can also <code>vim /home/deck/.var/app/io.github.dosbox-staging/config/dosbox/dosbox-staging.conf</code>. Of course you can also just copy the file to your desktop, edit it there with whatever editor you want, and copy it back. The relevant settings are the used <acronym title="Musical Instrument Digital Interface">MIDI</acronym> device and the sound font. The <acronym title="Musical Instrument Digital Interface">MIDI</acronym> device setting is named <code>mididevice</code> and can be found in the <code>[midi]</code> section. The sound font is configured using the <code>soundfont</code> setting in the <code>[fluidsynth]</code> section.
</p>
<p>
In my case those settings are (omitting the other fields in the respective categories):<br/>
</p>
<pre><code>[midi]
mididevice = fluidsynth

[fluidsynth]
soundfont = SC-55.sf2
</code></pre>
<p>
The sound font can of course also be loaded from a different folder. In that case the full path to the file has to be specified in the dosbox-staging.conf file.
</p>
<p>
For reference, you can <a href="https://www.grois.info/posts/2023-02/dosbox-staging.conf">download my current dosbox-staging.conf file</a>
</p>
<h2 id="installing-dos-game">Setting up a <acronym title="Disc Operating System">DOS</acronym> game</h2>
<p>
I'll use The Settlers 2 as an example here, because I have it up and running on my Steam Deck and it's working nicely. The procedure should be reasonably similar for any other <acronym title="Disc Operating System">DOS</acronym> game.
</p>
<p>
The version of Settlers 2 I installed on my deck is from <a href="https://www.gog.com"><acronym title="Good Old Games">GoG</acronym></a>. Their download is packaged for Windows only, but on other operating systems one can unpack it using <a href="https://www.winehq.org"><acronym title="WINE is not an emulator">WINE</acronym></a>. I guess with a bit of fiddling one could also unpack it directly on the Steam Deck, but I didn't bother and just launched the installer on my desktop to unpack the files.
</p>
<h3 id="copying-files-to-deck">Copying the game files to the Steam Deck</h3>
<p>
As already mentioned under <a href="https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml#ssh-access"><acronym title="Secure Shell">SSH</acronym> access</a>, on Linux almost any file manager will allow to copy the files over <acronym title="Secure Shell">SSH</acronym>.<br/>
<a href="https://www.grois.info/posts/2023-02/file-browser-deck.png"><img src="https://www.grois.info/posts/2023-02/file-browser-deck_thumb.png" width="320" height="200" alt="Screenshot of Thunar file browser, showing files on the Steam Deck"/></a><br/>
On Windows you might need a dedicated program to use <acronym title="Secure File Transfer Protocol">sftp</acronym>, see <a href="https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml#ssh-access"><acronym title="Secure Shell">SSH</acronym> access</a>.
</p>
<p>
You can put the files wherever you like under the <code>deck</code> user's home folder. I'd pick some easy to remember/find path, because it's going to be needed when <a href="https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml#adding-to-steam">adding the game to the Steam Library</a> later.
</p>
<h3 id="game-specific-dosbox-conf">Game-specific dosbox configuration file</h3>
<p>
DosBOX Staging uses a layered approach to configuration. This means that one can easily supplement the settings in the global file (the one edited in <a href="https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml#dosbox-staging-conf">DosBOX configuration</a>) by a game-specific configuration file.
</p>
<p>
This comes in handy, because the <a href="https://www.dosbox.com/wiki/AUTOEXEC"><code>[autoexec]</code> section</a> can be used to launch the respective game's executable, and other things, like mounting the game's <acronym title="Compact Disc">CD</acronym>. For Settlers 2 for instance, I created a file called &quot;dosbox-siedler2.conf&quot; with the following content:
</p>
<pre><code>[sdl]
fullscreen=true
autolock=true

[autoexec]
mount c /home/deck/DosGames/
imgmount d "/home/deck/DosGames/siedler2/settlers2.ins" -t iso -fs iso
c:
cd Siedler2
@VIDEO\SMACKPLY VIDEO\INTRO.SMK
s2
exit
</code>
</pre>
<p>
Note that the last line in <code>[autoexec]</code> is <code>exit</code>. This makes sure that DosBOX closes after one quits the game. In that snippet, the <a href="https://www.dosbox.com/wiki/MOUNT"><code>mount</code></a> and <a href="https://www.dosbox.com/wiki/IMGMOUNT"><code>imgmount</code></a> commands are part of DoxBOX and mount the folder with the <acronym title="Disc Operating System">DOS</acronym> games as drive C, and the game's <acronym title="Compact Disc">CD</acronym> as drive D. The rest is just regular <acronym title="Disc Operating System">DOS</acronym> batch file syntax that launches the <code>SMACKPLY</code> program to play the intro, and then <code>s2</code> to launch the actual game.
</p>
<p>
You should now be able to launch the game from the command line:<br/>
<code>flatpak run io.github.dosbox-staging -- -conf /home/deck/DosGames/siedler2/dosbox-siedler2.conf</code>
</p>
<h3 id="game-audio-config">Game audio configuration</h3>
<p>
It might be required to configure the game's audio to get actual sound and <acronym title="Musical Instrument Digital Interface">MIDI</acronym> output. Since this is only needed once, I'd just do so in Desktop Mode, and suffer the on-screen keyboard for these few inputs. The exact name of the audio configuration utility depends on the game, so consult the game's manual if unsure. In the case of Settlers 2 the program is called <code>DRIVERS&#92;SETSOUND.EXE</code> in the game's install folder. The commands to run it would therefore be:
</p>
<pre><code>mount c /home/deck/DosGames/
c:
cd Siedler2
cd DRIVERS
SETSOUND
</code>
</pre>
<p>
Unless you changed the DosBOX settings regarding sound, you should usually be able to use &quot;SoundBlaster&quot; or &quot;SoundBlaster 16&quot; for digital audio, and &quot;General MIDI&quot; for music.<br/>
<a href="https://www.grois.info/posts/2023-02/s2-setsound.png"><img src="https://www.grois.info/posts/2023-02/s2-setsound_thumb.png" width="320" height="212" alt="Screenshot of the Settlers 2 sound settings. Taken on my desktop."/></a>
</p>
<h2 id="adding-to-steam">Adding the game to the Steam Library</h2>
<h3 id="launch-script">Launch script</h3>
<p>
The easiest way to add a <acronym title="Disc Operating System">DOS</acronym> game to the Steam Library is to write a short launcher script. I simply named mine &quot;start-s2.sh&quot; and put it into the game's install folder, so I can find it easily. This file can be rather simple: Just a <a href="https://de.wikipedia.org/wiki/Shebang">Shebang</a> and the command to launch the game. For instance:
</p>
<pre><code>#!/bin/bash
flatpak run io.github.dosbox-staging -- -conf /home/deck/DosGames/siedler2/dosbox-siedler2.conf
</code></pre>
<p>
The script needs to have the "execute" permission set. The command to do that is <code>chmod +x start-s2.sh</code>. Of course you can do that using a graphical file manager too. I'm not sure if any Windows <acronym title="Secure File Transfer Protocol">sftp</acronym> programs allow you to modify the permissions on a file though. Just to be sure it works, it might be worth trying to launch the game from the command line.
</p>
<h3 id="steam-library">Adding the game to the Steam Library</h3>
<p>
If you now open Steam in Desktop Mode, you can go to the &quot;Games&quot; menu, and click &quot;Add a Non-Steam game to My Library...&quot;. Click the &quot;Browse&quot; button at the bottom of the selection window, and navigate the file browser to the folder where you put the launch script. Make sure to select &quot;All Files&quot; for the &quot;File Type&quot;, as Steam will not show executables otherwise.<br/>
<a href="https://www.grois.info/posts/2023-02/add-to-library.jpg"><img src="https://www.grois.info/posts/2023-02/add-to-library_thumb.jpg" width="320" height="192" alt="Screenshot of Steam's &quot;Add Non-Steam game to My Library&quot; dialogue."/></a>
</p>
<p>
After adding the game, the entry in the library will be named just like the script. This can easily be fixed by right-clicking it, and opening the &quot;Properties&quot; window. The text-box right at the top allows to change the game name.
</p>
<h3 id="steam-grid-db">Setting a grid image</h3>
<p>
Last, but not least, the game needs some artwork in Steam, to make it recognizable. I recommend the excellent <a href="https://www.steamgriddb.com/">SteamGridDB</a> website, which offers artwork for a lot of games, including many <acronym title="Disc Operating System">DOS</acronym> games. They even have a tool to easily set the artworks in Steam, named <a href="https://www.steamgriddb.com/boop">SGDBoop</a>.
</p>
<h2 id="results">Enjoy the results</h2>
<p>
Now everything should be up and running, so it's time to enjoy the actual game.<br/>
<a href="https://www.grois.info/posts/2023-02/library.jpg"><img src="https://www.grois.info/posts/2023-02/library_thumb.jpg" width="320" height="200" alt="Screenshot of the Steam Library on the Steam Deck, showing Settlers 2"/></a>
<a href="https://www.grois.info/posts/2023-02/settlers2.jpg"><img src="https://www.grois.info/posts/2023-02/settlers2_thumb.jpg" width="320" height="200" alt="Screenshot of Settlers 2 running on the Steam Deck in DosBOX Staging with working sound and MIDI - of course one can't see the sound"/></a>
</p>
]]></description><guid>https://www.grois.info/posts/2023-02/2023-02-02-dosbox-with-midi-on-the-steam-deck.xhtml</guid><pubDate>Thu, 02 Feb 2023 00:06:00 +0100</pubDate></item><item><title>The maths behind passwordmaker-rs-0.2</title><link>https://www.grois.info/posts/2023-01/2023-01-29-the-maths-behind-passwordmaker-rs-0-2.xhtml</link><description><![CDATA[<h2 id="what-is-new">What is new in version 0.2?</h2>
<p>
From a user's perspective not much has changed between versions 0.1 and 0.2. The API is unchanged, and unless there is a bug, the output is the same too. This of course raises the question what actually changed between the two versions.
</p>
<p>
The short answer is "performance".
</p>
<p>
Of course that's not the only change. Apart from the performance changes there were also significant improvements to the code quality and the test coverage improved greatly. The performance changes also led to the introduction of feature flags that can be enabled to improve performance at the cost of increased binary size.
</p>
<h2 id="base-conversion-0.1">Base conversion in 0.1</h2>
<p>
This blog is about the biggest change with respect to performance, namely the rewrite of the base conversion code. To understand why it was rewritten, you need to know what version 0.1 did in order to convert between different bases.
</p>
<p>
But first things first. The base conversion is the part of PasswordMaker Pro (and therefore also of passwordmaker-rs) that maps the hash value which gets generated from the user's input onto the list of characters that the user allows to have in the generated password. PasswordMaker Pro chose to do this in a mathematically correct way, meaning that the most significant digit of the converted number determines the first character in the generated password (or password-part if the mapped hash is shorter than the desired password-length). This has two consequences:
</p>
<ul>
	<li>The first character of each password-part has a higher probability to be from the beginning of the list of allowed characters. That is because the size of the hash is typically not a power of the length of the list of password characters. I don't think this can be exploited, but I'm not sure and from a gut feeling I would have preferred if the most significant digit would have been ignored.</li>
	<li>The second consequence is about performance. The usual algorithm to convert between bases yields the least significant digit first. This means, in order to get the most significant digit the whole number needs to be converted first, and the result needs to be collected into a buffer in order to allow reversing it.</li>
</ul>
<p>
As a reminder, the usual formula to convert a number from base A to base B using arthmetic in base A is to repeatedly divide it by that base, and to note the remainders until the quotient is zero. Reading the remainders in reverse yields the desired number. As an example, let's convert the number 12345 to hexadecimal.
</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
<mtable>
	<mtr>
	<mtd><mfrac><mn>12345</mn><mn>16</mn></mfrac></mtd>
	<mtd><mo>=</mo></mtd>
	<mtd><mn>771</mn></mtd>
	<mtd><mo>+</mo></mtd>
	<mtd><mfrac><mn>9</mn><mn>16</mn></mfrac></mtd>
	</mtr>
	<mtr>
	<mtd><mfrac><mn>771</mn><mn>16</mn></mfrac></mtd>
	<mtd><mo>=</mo></mtd>
	<mtd><mn>48</mn></mtd>
	<mtd><mo>+</mo></mtd>
	<mtd><mfrac><mn>3</mn><mn>16</mn></mfrac></mtd>
	</mtr>
	<mtr>
	<mtd><mfrac><mn>48</mn><mn>16</mn></mfrac></mtd>
	<mtd><mo>=</mo></mtd>
	<mtd><mn>3</mn></mtd>
	<mtd><mo>+</mo></mtd>
	<mtd><mfrac><mn>0</mn><mn>16</mn></mfrac></mtd>
	</mtr>
	<mtr>
	<mtd><mfrac><mn>3</mn><mn>16</mn></mfrac></mtd>
	<mtd><mo>=</mo></mtd>
	<mtd><mn>0</mn></mtd>
	<mtd><mo>+</mo></mtd>
	<mtd><mfrac><mn>3</mn><mn>16</mn></mfrac></mtd>
	</mtr>
</mtable>
</math>
<p>
The remainders, read from bottom to top, are 0x3039. However, if we would only have cared for the first two digits of that number, we still would have had to complete the whole conversion. Now, in the case of cryptographic hashes the numbers are much larger, of course. The smallest hashes supported by PasswordMaker Pro are 16&nbsp;bytes long.
</p>
<p>
By default, PasswordMaker Pro uses 94 characters for password generation. With a 16&nbsp;bytes hash this yields 20 characters per password-part. Typical user passwords are probably about half that length. For larger hashes an even lower fraction of the generated digits is used. 20&nbsp;bytes yield 25 characters, 32&nbsp; yield 40 per password-part. In addition, the converted number's digits need to be stored, and in the worst case this can mean storing 256&nbsp;digits. Since the digits of base conversion are used as indices into a user-supplied array, they can, depending on user input, go up to <code>&lt;usize&gt;::MAX</code>. In other words, the 256&nbsp;digits case would take 2&nbsp;kibibytes of memory, what is a significant portion of the L1 cache even on modern CPUs.
</p>
<h2 id="goals-for-base-conversion-in-0.2">Goals for the base conversion in 0.2</h2>
<p>
While this obviously is not a big issue for normal use cases of passwordmaker-rs, it still annoyed me that the library is doing work that's then thrown away... So I decided to try to optimize this code. This left me with the most important question though: How? Knowing how it should not work, makes the goals for an improvement rather obvious:
</p>
<ul>
	<li> The only real way to be able to skip allocating the buffer is to implement the base conversion such that it generates the digits in the order that they are needed in, starting with the most significant digit.</li>
	<li>It would also be nice to implement this in the form of an iterator, so that taking only the desired number of characters would allow the computation to early-out.</li>
	<li>Since any reformulation will likely increase the complexity of the code, a slight performance regression in worst-case scenarios is acceptable, but only under the condition that typical user inputs see a significant improvement.</li>
</ul>
<h2 id="base-conversion-starting-at-most-significant-digit">Base conversion starting at most significant digit</h2>
<p>
The idea for the alternative algorithm comes from the inverse operation of the base conversion presented above. To convert from base A to base B using base B arithmetics, one has to start at the most significant digit, multiply it by the base, add the next digit, multiply the result by the base, add the next digit, multiply, add, and so on and so forth. For the example shown above, this would read:<br/>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
<mrow>
	<mo>(</mo>
	<mrow>
		<mo>(</mo>
		<mrow>
			<mo>(</mo>
			<mrow>
				<mo>(</mo>
				<mn>3</mn>
				<mo>)</mo>
			</mrow>
			<mo>&#x22C5;<!-- ⋅ --></mo>
			<mn>16</mn>
			<mo>)</mo>
		</mrow>
		<mo>+</mo>
		<mn>0</mn>
		<mo>)</mo>
	</mrow>
	<mo>&#x22C5;<!-- ⋅ --></mo>
	<mn>16</mn>
	<mo>+</mo>
	<mn>3</mn>
	<mo>)</mo>
</mrow>
<mo>&#x22C5;<!-- ⋅ --></mo>
<mn>16</mn>
<mo>+</mo>
<mn>9</mn>
<mo>=</mo>
<mn>12345</mn>
</math>
</p>
<p>
The same formula can be rewritten by expanding the multiplications (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi></math> denotes the base, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>d</mi><mi>i</mi></msub></math> denotes the i'th digit, where <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>d</mi><mn>0</mn></msub></math> is the least significant digit.):
</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
<munderover>
<mo>&#x2211;<!-- ∑ --></mo>
<mrow>
<mi>i</mi>
<mo>=</mo>
<mn>0</mn>
</mrow>
<mrow>
<mi>N</mi>
</mrow>
</munderover>
<msup>
<mi>b</mi>
<mi>i</mi>
</msup>
<mo>&#x22C5;<!-- ⋅ --></mo>
<msub>
<mi>d</mi>
<mi>i</mi>
</msub>
</math>
<p>
For the example this would read:
</p>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
<mn>3</mn>
<mo>&#x22C5;<!-- ⋅ --></mo>
<msup>
<mn>16</mn>
<mn>3</mn>
</msup>
<mo>+</mo>
<mn>0</mn>
<mo>&#x22C5;<!-- ⋅ --></mo>
<msup>
<mn>16</mn>
<mn>2</mn>
</msup>
<mo>+</mo>
<mn>3</mn>
<mo>&#x22C5;<!-- ⋅ --></mo>
<msup>
<mn>16</mn>
<mn>1</mn>
</msup>
<mo>+</mo>
<mn>9</mn>
<mo>&#x22C5;<!-- ⋅ --></mo>
<msup>
<mn>16</mn>
<mn>0</mn>
</msup>
<mo>=</mo>
<mn>12345</mn>
</math>
<p>
Based on this formula, it's straightforward to formulate the desired algorithm:
</p>
<ol>
	<li>The input is the starting value for the dividend.</li>
	<li>Find the highest power of the base that is still smaller or equal to the input. This is the starting value for the divisor.</li>
	<li>Divide the dividend by the divisor. The quotient is the next digit of the result.</li>
	<li>The remainder is the new value for the dividend.</li>
	<li>Divide the previous divisor by the base. This is the new divisor.</li>
	<li>Repeat steps 3-5 until the divisor is equal to 0.</li>
</ol>
<p>
Let's go through our example again, and convert 12345 to hexadecimal using this algorithm.
</p>
<ul>
	<li>The starting dividend is 12345.</li>
	<li>The highest power of 16 that's equal to or smaller than 12345 is 4096 (<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>16</mn><mn>3</mn></msup></math>).</li>
	<li>
		<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>12345</mn><mn>4096</mn></mfrac><mo>=</mo><mn>3</mn><mo>+</mo><mfrac><mn>57</mn><mn>4096</mn></mfrac></math>, so our first digit is <em>3</em>.
	</li>
	<li>The remainder was 57. This is our new dividend.</li>
	<li>The new divisor is given by <math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>4096</mn><mn>16</mn></mfrac><mo>=</mo><mn>256</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>57</mn><mn>256</mn></mfrac><mo>=</mo><mn>0</mn><mo>+</mo><mfrac><mn>57</mn><mn>256</mn></mfrac></math>, so our second digit is <em>0</em>.</li>
	<li>The remainder was 57 (again). This is our new dividend.</li>
	<li>The new divisor is given by <math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>256</mn><mn>16</mn></mfrac><mo>=</mo><mn>16</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>57</mn><mn>16</mn></mfrac><mo>=</mo><mn>3</mn><mo>+</mo><mfrac><mn>9</mn><mn>16</mn></mfrac></math>, so our third digit is <em>3</em>.</li>
	<li>The remeinader was 9. This is our new dividend.</li>
	<li>The new divisor is given by <math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>16</mn><mn>16</mn></mfrac><mo>=</mo><mn>1</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>9</mn><mn>1</mn></mfrac><mo>=</mo><mn>9</mn><mo>+</mo><mfrac><mn>0</mn><mn>1</mn></mfrac></math>, so our fourth digit is <em>9</em>.</li>
	<li>The remainder was 0. This would be the new dividend.</li>
	<li>However we don't need it any more, because <math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>1</mn><mn>16</mn></mfrac><mo>=</mo><mn>0</mn><mo>+</mo><mfrac><mn>1</mn><mn>16</mn></mfrac></math>, so our next divisor would be zero. This indicates that the conversion is complete.</li>
</ul>
<p>
As expected, we have reached the same result as above, 0x3039, but this time starting at the most significant bit.
</p>
<h2 id="implementation-in-passwordmaker-rs">Implementation in passwordmaker-rs</h2>
<p>
For the hashes that fit into <code>u128</code> the implementation is straightforward, using the arithmetics defined for this data type. It would be tempting to use the <code>num_bigint</code> crate for the bigger hashes, but that crate uses heap allocations, because it cannot make assumptions about the size of the data stored in the <code>BigInt</code> type. The size of the hashes used in passwordmaker-rs is known at compile time, so it is quite tempting to use a stack-allocated <code>Sized</code> type instead.
</p>
<p>
To make this possible, arithmetic for numbers of 20 and 32 bytes has been implemented, using a positional notation with a base of <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>2</mn><mrow><mn>32</mn></mrow></msup></math>. For multiplication the school method was used, and division has been implemented following <cite>Donald E. Knuth, The Art of Computer Programming, Vol. 2, Section 4.3, Algorithm D.</cite>. This is the same algorithm that <code>BigInt</code> uses.
</p>
<h3 id="optimizations">Optimizations</h3>
<p>
While the above works, it is not particularly fast. Having to find the highest power of the base that fits into the input takes time, and dividing the divisor by the base between each iteration is not optimal either.
</p>
<p>
The search for the highest power of the base that fits into the input can be sped up by increasing the power quadratically instead of linearly, and only switching back to linear search for the last few steps.
</p>
<p>
The search can be skipped altogether though. The chance that the highest power of the base that fits into the input's data type is the same as the largest one that fits the input value is rather high, and even if not, any leading zeros can just be skipped. What this means is that instead of doing a search at runtime, one can precompute the highest fitting powers for various possible bases, and trade a bit of binary size for quite a significant gain in performance. Of course it's not feasible to precompute this for all possible values of <code>usize</code>, but at least for values the users are expected to use. The runtime search is used as a fallback, in case a base that has not been precomputed is required. In passwordmaker-rs the number of precomputed values can be tweaked with feature flags.
</p>
<p>
Under the (quite justified) assumption that multiplication is faster than division, the algorithm for base conversion can be modified:
</p>
<ol>
	<li>The input is the starting value for the dividend.</li>
	<li>Find the highest power of the base that fits into the input's data type. This is the starting value for the divisor. Also store the exponent plus one, as it is the number of digits of the result.</li>
	<li>Divide the dividend by the divisor. The quotient is the first digit of the result.</li>
	<li>The remainder is the new value of the dividend.</li>
	<li>Divide the previous divisor by the base. This is the new divisor.</li>
	<li>Divide the dividend by the divisor. The quotient is the next digit of the result.</li>
	<li>Take the remainder and multiply it by the base. This is the new dividend.</li>
	<li>Repeat steps 6 and 7 until the number of digits computed in step 2 has been returned.</li>
</ol>
<p>
The first division of the divisor by the base (step 5) is required to avoid overflow.
</p>
<p>
Even though this modification means that the number of digits in the division (step 7) does not decrease over time, the overall performance improved a lot on the tested hardware.
</p>
<p>
Let's go through the example of converting 12345 to hexadecimal one last time, with this modified algorithm. For simplicity let's assume our data type can store decimal values up to 5 digits, so the largest value is 99999.
</p>
<ul>
	<li>The starting value for the dividend is 12345.</li>
	<li>Since our example data type goes up to 99999, the highest power of 16 we can fit into it is <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>16</mn><mn>4</mn></msup><mo>=</mo><mn>65536</mn></math>. This means that our output will have <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>4</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></math> digits, and that 65536 will be our first divisor.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>12345</mn><mn>65536</mn></mfrac><mo>=</mo><mn>0</mn><mo>+</mo><mfrac><mn>12345</mn><mn>65536</mn></mfrac></math> means that our first digit is <em>0</em>. Leading zeros are unlikely in practice because a good hash has a 50% chance for each bit of the output to be 1.</li>
	<li>The remainder is 12345. This is our new dividend.</li>
	<li>The new divisor is given by <math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>65536</mn><mn>16</mn></mfrac><mo>=</mo><mn>4096</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>12345</mn><mn>4096</mn></mfrac><mo>=</mo><mn>3</mn><mo>+</mo><mfrac><mn>57</mn><mn>4096</mn></mfrac></math>, so the second digit is <em>3</em></li>
	<li>We now leave the divisor unchanged, and rather multiply the remainder by the base to get the new dividend: <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>57</mn><mo>·</mo><mn>16</mn><mo>=</mo><mn>912</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>912</mn><mn>4096</mn></mfrac><mo>=</mo><mn>0</mn><mo>+</mo><mfrac><mn>912</mn><mn>4096</mn></mfrac></math>, so the third digit is <em>0</em>.</li>
	<li>The next dividend is <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>912</mn><mo>·</mo><mn>16</mn><mo>=</mo><mn>14592</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>14592</mn><mn>4096</mn></mfrac><mo>=</mo><mn>3</mn><mo>+</mo><mfrac><mn>2304</mn><mn>4096</mn></mfrac></math>, so the fourth digit is <em>3</em>.</li>
	<li>The next dividend is <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>2304</mn><mo>·</mo><mn>16</mn><mo>=</mo><mn>36864</mn></math>.</li>
	<li><math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mn>36864</mn><mn>4096</mn></mfrac><mo>=</mo><mn>9</mn><mo>+</mo><mfrac><mn>0</mn><mn>4096</mn></mfrac></math>, so our fifth and final digit is <em>9</em>.</li>
</ul>
<p>
Again we reached our desired value of 0x03039. The leading zero can easily be skipped, for instance by using the <code>std::iter::Iterator::skip_while&lt;P&gt;(self, predicate: P)</code> method.
</p>
<p>
One thing that is worth noting is that it might look tempting to change the condition for conversion completion from pre-determining the number of digits to "if the dividend is zero", but that would be <em>wrong</em> in cases where there are trailing zeros.
</p>
<h2 id="results">Results</h2>
<p>
The benchmarks were performed with a target-basis of 94 and hard-coded hash values. The numbers posted here are recorded on an AMD Ryzen 1700X processor.
For the exact input parameters of the benchmarks, please check the <a href="https://github.com/soulsource/passwordmaker-rs/tree/v0.2.1/benches">benchmark source code</a> (beware, the parameters labelled &quot;worst case&quot; in the source code are worst case for version 0.1 - the worst case for version 0.2 is labelled &quot;full divide&quot;).
</p>
<h3>Typical</h3>
<p>
For a &quot;typical&quot; password length of 12 characters, all hash lengths show a clear improvement over version 0.1:
</p>
<ul>
	<li>For 16 byte hashes the performance improved by approximately 45%.</li>
	<li>For 20 byte hashes the performance improved by approximately 30%.</li>
	<li>For 32 byte hashes the performance improved by approximately 50%.</li>
</ul>
<h3>Worst case</h3>
<p>
However, for worst case scenarios, in which all digits of the result are required (20 for 16 bytes, 25 for 20 bytes, and 40 for 32 bytes), the results are not that great:
</p>
<ul>
	<li>For 16 byte hashes the performance improved by approximately 30%.</li>
	<li>For 20 byte hashes the performance got worse by approximately 10%.</li>
	<li>For 32 byte hashes the performance got worse by approximately 10%.</li>
</ul>
<p>
It is worth noting that for even longer passwords the relative performance of version 0.2 compared to 0.1 improves again. Due to this and the very significant improvement for typical password lengths, I still consider version 0.2 a huge improvement over 0.1. Also, most users will likely use the default hash algorithm, which has 16 byte hashes and gains performance even in the worst case scenario.
</p>
<p>
The actual gains/losses in performance depend on the user's hardware though.
I don't have the numbers any more, but I also profiled the code on a Raspberry Pi and on that slower hardware the performance of version 0.2 easily outperformed version 0.1 for all possible input parameters. I won't reproduce this right now though, because compilation on the Raspberry Pi takes several hours.
</p>
<h2 id="plans-for-the-future">Plans for the future</h2>
<p>
The choice of <code>u32</code> as the base of the number sytem in which the arithmetic is implemented was mostly based on gut feeling. The division algorithm from <acronym title="The Art of Computer Programming">TAOCP</acronym> requires an error-correction step which is less likely to be required the larger the base is. In addition, 32 is the greatest common divisor of 160 and 256, so it's equally suited for both hash sizes. It would be worth investigating how switching to <code>u64</code> or <code>u8</code> affects performance.
</p>
<p>
There is likely still optimization potential in the arithmetic functions. It is for instance not clear why the normalization step in the division function takes as long as it does. Possibly those functions can still be reformulated to reduce their CPU time costs.
</p>
]]></description><guid>https://www.grois.info/posts/2023-01/2023-01-29-the-maths-behind-passwordmaker-rs-0-2.xhtml</guid><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate></item><item><title>Why is this blog so ugly?</title><link>https://www.grois.info/posts/2023-01/2023-01-29-why-is-this-blog-so-ugly.xhtml</link><description><![CDATA[<p>
That's because this website doesn't use any page-level style sheet. Most of the <acronym title="Extensible Hypertext Markup Language">XHTML</acronym> is also written by hand.
</p>
<p>
There are several reasons for this, and I would lie if I said that me being lazy wouldn't have played a role. However, the most important reason is that I wanted to make a statement, namely that I don't think that most modern websites are particularly well designed. They might be beautiful, but that's only a small part of a website's user experience. Other important parts of the <acronym title="user experience">UX</acronym> are that the website's content can be navigated easily, that the information the viewer wants to see is easy to find and presented in a readable way, that there are no distractions from the content, that the website loads fast, that it can be accessed on a Braille terminal,&#8230;  Those aspects are where too many modern websites are lacking.
</p>
<p>
The lack of (almost) all custom design, with a focus on the text content, is meant to contrast this sad trend.
</p>
<h2 id="browser-settings">Browser settings</h2>
<p>
Most browsers have settings that allow to customize colours and fonts used by websites without a style sheet. In Mozilla Firefox, for instance, you can find the settings for default colour and font in the &quot;General&quot; category in the browser's preferences, under &quot;Language and Appearance&quot;.
</p>
<p>
A word of warning though: Many websites supply incomplete style sheets. They assume that the user's browser is configured to display black text on a white background and become unusable if one or both of these colors are changed.
</p>
<p>
An interesting feature most browsers offer is to intentionally ignore the style sheet supplied by a website. This can help to improve readability, if the style sheet of the site is particularly bad. Again, in Firefox, you can find the respective feature in the &quot;View&quot; menu (visible after pressing the <kbd>ALT</kbd> key). The entry is called &quot;Page Style&quot;.
</p>
]]></description><guid>https://www.grois.info/posts/2023-01/2023-01-29-why-is-this-blog-so-ugly.xhtml</guid><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate></item></channel></rss>
